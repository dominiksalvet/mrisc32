# -*- mode: yaml; tab-width: 2; indent-tabs-mode: nil; -*-
# -----------------------------------------------------------------------------
# Copyright (c) 2021 Marcus Geelnard
#
# This software is provided 'as-is', without any express or implied warranty.
# In no event will the authors be held liable for any damages arising from the
# use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
#  1. The origin of this software must not be misrepresented; you must not
#     claim that you wrote the original software. If you use this software in a
#     product, an acknowledgment in the product documentation would be
#     appreciated but is not required.
#
#  2. Altered source versions must be plainly marked as such, and must not be
#     misrepresented as being the original software.
#
#  3. This notice may not be removed or altered from any source distribution.
# -----------------------------------------------------------------------------

---
templates:
  # Load/Store instructions.
  type1: &type1
    fmts: [A, C]
    tMode: X
    vModes: [VSS, VSV]
    fold: true
    asmOperands: "{1}, {2}, {3}"

  # Bitwise operations (format A + C without packed support).
  type2: &type2
    fmts: [A, C]
    tMode: N
    vModes: [VVS, VVV]
    fold: true
    asmOperands: "{1}, {2}, {3}"

  # Regular format A + C instructions.
  type3: &type3
    fmts: [A, C]
    tMode: P
    vModes: [VVS, VVV]
    fold: true
    asmOperands: "{1}, {2}, {3}"

  # Regular format A instructions.
  type4: &type4
    fmts: [A]
    tMode: P
    vModes: [VVS, VVV]
    fold: true
    asmOperands: "{1}, {2}, {3}"

  # Regular format B instructions.
  type5: &type5
    fmts: [B]
    tMode: P
    vModes: [VV]
    fold: false
    asmOperands: "{1}, {2}"

  # Regular format D instructions.
  type6: &type6
    fmts: [D]
    tMode: N
    vModes: []
    fold: false
    asmOperands: "{1}, {2}"

  # Branch instructions (format D).
  type7: &type7
    <<: *type6
    fmts: [D]
    tMode: N
    vModes: []
    fold: false
    asmOperands: "{1}, #target"

instructions:
  Load and store:
    LDB:
      <<: *type1
      descr: >
        Load and sign extend a byte (8 bits).
      op: 1

    LDH:
      <<: *type1
      descr: >
        Load and sign extend a half-word (16 bits).
      op: 2

    LDW:
      <<: *type1
      descr: >
        Load a word (32 bits).
      op: 3

    LDUB:
      <<: *type1
      descr: >
        Load and zero extend a byte (8 bits).
      op: 5

    LDUH:
      <<: *type1
      descr: >
        Load and zero extend a half-word (16 bits).
      op: 6

    LDEA:
      <<: *type1
      descr: >
        Load effective address.
      note: >
        When the target operand is a vector register, LDEA can be used for
        constructing strides. For instance LDEA V1,Z,#3 will assign the
        vector [0,3,6,9,...] to register V1.
      op: 7

  Load immediate:
    LDLI:
      <<: *type6
      descr: >
        Load low immediate value.
      op: 58
      asmOperands: "{1}, #ext21(IM)"

    LDHI:
      <<: *type6
      descr: >
        Load high immediate value.
      op: 59
      asmOperands: "{1}, #ext21hi(IM)"

    LDHIO:
      <<: *type6
      descr: >
        Load high immediate value with low ones.
      op: 60
      asmOperands: "{1}, #ext21hio(IM)"

  Bitwise logic:
    OR:
      <<: *type2
      descr: >
        Compute the bitwise or of two integer operands.
      op: 16

    NOR:
      <<: *type2
      descr: >
        Compute the bitwise inverse or of two integer operands.
      op: 17

    AND:
      <<: *type2
      descr: >
        Compute the bitwise and of two integer operands.
      op: 18

    BIC:
      <<: *type2
      descr: >
        Compute the bitwise clear of two integer operands.
      op: 19

    XOR:
      <<: *type2
      descr: >
        Compute the bitwise exclusive or of two integer operands.
      op: 20

    ASR:
      <<: *type3
      descr: >
        Arithmetically shift an integer operand to the right the number of
        bit positions given by another integer operand. Only the lowest five
        bits of the shift operand are used.
      op: 33

    LSL:
      <<: *type3
      descr: >
        Logically shift an integer operand to the left the number of bit
        positions given by another integer operand. Only the lowest five
        bits of the shift operand are used.
      op: 34

    LSR:
      <<: *type3
      descr: >
        Logically shift an integer operand to the right the number of bit
        positions given by another integer operand. Only the lowest five
        bits of the shift operand are used.
      op: 35

    SEL:
      <<: *type3
      descr: >
        Bitwise select.
      todo: >
        Describe this in detail.
      op: 36
      tMode: S  # SEL uses a special kind of interpretation of the T field.

  Integer arithmetic:
    ADD:
      <<: *type3
      descr: >
        Compute the sum of two integer operands.
      op: 21

    SUB:
      <<: *type3
      descr: >
        Compute the difference of two integer operands.
      op: 22
      # The source operands are reversed for SUB.
      asmOperands: "{1}, {3}, {2}"

    MIN:
      <<: *type3
      descr: >
        Return the minimum value of two signed integer operands.
      op: 29

    MAX:
      <<: *type3
      descr: >
        Return the maximum value of two signed integer operands.
      op: 30

    MINU:
      <<: *type3
      descr: >
        Return the minimum value of two unsigned integer operands.
      op: 31

    MAXU:
      <<: *type3
      descr: >
        Return the maximum value of two unsigned integer operands.
      op: 32

    MULQ:
      <<: *type4
      descr: >
        Compute the product of two fixed point operands.
      todo: >
        Describe this in detail.
      op: 64

    MUL:
      <<: *type4
      descr: >
        Compute the product of two integer operands.
      op: 65

    MULHI:
      <<: *type4
      descr: >
        Compute the upper part of the product of two signed integer operands.
      todo: >
        Describe this in detail.
      op: 66

    MULHIU:
      <<: *type4
      descr: >
        Compute the upper part of the product of two unsigned integer
        operands.
      todo: >
        Describe this in detail.
      op: 67

    DIV:
      <<: *type4
      descr: >
        Compute the quotient of two signed integer operands.
      op: 68

    DIVU:
      <<: *type4
      descr: >
        Compute the quotient of two unsigned integer operands.
      op: 69

    REM:
      <<: *type4
      descr: >
        Compute the modulo of two signed integer operands.
      op: 70

    REMU:
      <<: *type4
      descr: >
        Compute the modulo of two unsigned integer operands.
      op: 71

  Integer comparison:
    SEQ:
      <<: *type3
      descr: >
        Compare two integer operands, and set all bits of the result to 1 if
        the operands are equal, otherwise set all bits of the result to 0.
      op: 23

    SNE:
      <<: *type3
      descr: >
        Compare two integer operands, and set all bits of the result to 1 if
        the operands are not equal, otherwise set all bits of the result to
        0.
      op: 24

    SLT:
      <<: *type3
      descr: >
        Compare two signed integer operands, and set all bits of the result
        to 1 if the first operand is less than the second operand, otherwise
        set all bits of the result to 0.
      op: 25

    SLTU:
      <<: *type3
      descr: >
        Compare two unsigned integer operands, and set all bits of the result
        to 1 if the first operand is less than the second operand, otherwise
        set all bits of the result to 0.
      op: 26

    SLE:
      <<: *type3
      descr: >
        Compare two signed integer operands, and set all bits of the result
        to 1 if the first operand is less than or equal to the second
        operand, otherwise set all bits of the result to 0.
      op: 27

    SLEU:
      <<: *type3
      descr: >
        Compare two unsigned integer operands, and set all bits of the result
        to 1 if the first operand is less than or equal to the second
        operand, otherwise set all bits of the result to 0.
      op: 28

  Branch:
    BZ:
      <<: *type7
      descr: >
        Branch to the PC-relative target if all bits of the first source
        operand are zero.
      todo: >
        Document how the PC-relative address is calculated.
      op: 48

    BNZ:
      <<: *type7
      descr: >
        Branch to the PC-relative target if at least one of bits of the first
        source operand is non-zero.
      todo: >
        Document how the PC-relative address is calculated.
      op: 49

    BS:
      <<: *type7
      descr: >
        Branch to the PC-relative target if all bits of the first source
        operand are non-zero.
      todo: >
        Document how the PC-relative address is calculated.
      op: 50

    BNS:
      <<: *type7
      descr: >
        Branch to the PC-relative target if at least one of bits of the first
        source operand is zero.
      todo: >
        Document how the PC-relative address is calculated.
      op: 51

    BLT:
      <<: *type7
      descr: >
        Branch to the PC-relative target if the first source operand is a
        signed integer value that is less than zero.
      todo: >
        Document how the PC-relative address is calculated.
      op: 52

    BGE:
      <<: *type7
      descr: >
        Branch to the PC-relative target if the first source operand is a
        signed integer value that is greater than or equal to zero.
      todo: >
        Document how the PC-relative address is calculated.
      op: 53

    BLE:
      <<: *type7
      descr: >
        Branch to the PC-relative target if the first source operand is a
        signed integer value that is less than or equal to zero.
      todo: >
        Document how the PC-relative address is calculated.
      op: 54

    BGT:
      <<: *type7
      descr: >
        Branch to the PC-relative target if the first source operand is a
        signed integer value that is greater than zero.
      todo: >
        Document how the PC-relative address is calculated.
      op: 55

    J:
      <<: *type7
      descr: >
        Jump to the target address that is formed by computing the sum of the
        register operand and the sign-extended immediate value multiplied by
        four.
      note: >
        PC is a valid register operand, in which case a PC-relative branch is
        performed.
      op: 56

    JL:
      <<: *type7
      descr: >
        Jump and link. The current value of PC plus four is stored in the LR
        register, and the new PC is set to the target address that is formed by
        computing the sum of the register operand and the sign-extended
        immediate value multiplied by four.
      note: >
        PC is a valid register operand, in which case a PC-relative branch is
        performed.
      op: 57

  Saturating and halving arithmetic:
    ADDS:
      <<: *type4
      descr: >
        Compute the saturated sum of two signed integer operands.
      op: 56

    ADDSU:
      <<: *type4
      descr: >
        Compute the saturated sum of two unsigned integer operands.
      op: 57

    ADDH:
      <<: *type4
      descr: >
        Compute the half sum of two signed integer operands.
      op: 58

    ADDHU:
      <<: *type4
      descr: >
        Compute the half sum of two unsigned integer operands.
      op: 59

    SUBS:
      <<: *type4
      descr: >
        Compute the saturated difference of two signed integer operands.
      op: 60

    SUBSU:
      <<: *type4
      descr: >
        Compute the saturated difference of two unsigned integer operands.
      op: 61

    SUBH:
      <<: *type4
      descr: >
        Compute the half difference of two signed integer operands.
      op: 62

    SUBHU:
      <<: *type4
      descr: >
        Compute the half difference of two unsigned integer operands.
      op: 63

  Floating-point arithmetic:
    FMIN:
      <<: *type4
      descr: >
        Return the minimum value of two floating-point operands.
      op: 96

    FMAX:
      <<: *type4
      descr: >
        Return the maximum value of two floating-point operands.
      op: 97

    FADD:
      <<: *type4
      descr: >
        Compute the sum of two floating-point operands.
      op: 112

    FSUB:
      <<: *type4
      descr: >
        Compute the difference of two floating-point operands.
      op: 113

    FMUL:
      <<: *type4
      descr: >
        Compute the product of two floating-point operands.
      op: 114

    FDIV:
      <<: *type4
      descr: >
        Compute the quotient of two floating-point operands.
      op: 115

  Floating-point comparison:
    FSEQ:
      <<: *type4
      descr: >
        Compare two floating-point operands, and set all bits of the result to
        1 if the first operand is equal to the second operand, otherwise set
        all bits of the result to 0.
      op: 98

    FSNE:
      <<: *type4
      descr: >
        Compare two floating-point operands, and set all bits of the result to
        1 if the first operand is not equal to the second operand, otherwise
        set all bits of the result to 0.
      op: 99

    FSLT:
      <<: *type4
      descr: >
        Compare two floating-point operands, and set all bits of the result to
        1 if the first operand is less than the second operand, otherwise set
        all bits of the result to 0.
      op: 100

    FSLE:
      <<: *type4
      descr: >
        Compare two floating-point operands, and set all bits of the result to
        1 if the first operand is less than or equal to the second operand,
        otherwise set all bits of the result to 0.
      op: 101

    FSUNORD:
      <<: *type4
      descr: >
        Set all bits of the result to 1 if any of the source operands are
        undordered (i.e. NaN), otherwise set all bits of the result to 0.
      op: 102

    FSORD:
      <<: *type4
      descr: >
        Set all bits of the result to 1 if both of the source operands are
        ordered (i.e. non-NaN), otherwise set all bits of the result to 0.
      op: 103

  Floating-point conversion:
    ITOF:
      <<: *type4
      descr: >
        Convert a signed integer value to a floating-point value. The exponent
        of the resulting floating-point value is subtracted by the integer
        offset provided by the second source operand before storing the final
        floating-point value in the destination operand.
      op: 104

    UTOF:
      <<: *type4
      descr: >
        Convert an unsigned integer value to a floating-point value. The
        exponent of the resulting floating-point value is subtracted by the
        integer offset provided by the second source operand before storing the
        final floating-point value in the destination operand.
      op: 105

    FTOI:
      <<: *type4
      descr: >
        Convert a floating-point value to a signed integer value, without
        rounding. The integer offset provided by the second source operand is
        added to the floating-point exponent before the conversion.
      op: 106

    FTOU:
      <<: *type4
      descr: >
        Convert a floating-point value to an unsigned integer value, without
        rounding. The integer offset provided by the second source operand is
        added to the floating-point exponent before the conversion.
      op: 107

    FTOIR:
      <<: *type4
      descr: >
        Convert a floating-point value to a signed integer value, with
        rounding. The integer offset provided by the second source operand is
        added to the floating-point exponent before the conversion.
      op: 108

    FTOUR:
      <<: *type4
      descr: >
        Convert a floating-point value to an unsigned integer value, with
        rounding. The integer offset provided by the second source operand is
        added to the floating-point exponent before the conversion.
      op: 109

    FPACK:
      <<: *type4
      descr: >
        Convert and pack two floating-point operands into a single operand.

        The precision of the two source operands are halved. The first source
        operand is packed and stored in the upper half of the destination
        operand, and the second source operand is packed and stored in the
        lower half of the destination operand.
      op: 110

    FUNPL:
      <<: *type5
      descr: >
        Unpack the low half of a packed floating-point pair. The preicison of
        the unpacked source floating-point value is doubled and stored in the
        destination operand.
      op: 125
      fn: 0

    FUNPH:
      <<: *type5
      descr: >
        Unpack the high half of a packed floating-point pair. The preicison of
        the unpacked source floating-point value is doubled and stored in the
        destination operand.
      op: 125
      fn: 1

  # TODO(m): Find better categories for these instructions.
  Other:
    SHUF:
      <<: *type2
      descr: >
        Shuffle bytes.
      todo: >
        Describe this in detail.
      op: 36

    PACK:
      <<: *type4
      descr: >
        Pack the lower parts of two integer operands.
      todo: >
        Describe this in detail.
      op: 48

    PACKS:
      <<: *type4
      descr: >
        Saturate and pack the lower parts of two signed integer operands.
      todo: >
        Describe this in detail.
      op: 49

    PACKSU:
      <<: *type4
      descr: >
        Saturate and pack the lower parts of two unsigned integer operands.
      todo: >
        Describe this in detail.
      op: 50

    CLZ:
      <<: *type5
      descr: >
        Count the number of leading zero bits in the source operand.
      op: 124
      fn: 0

    POPCNT:
      <<: *type5
      descr: >
        Count the number of non-zero bits in the source operand.
      op: 124
      fn: 1

    REV:
      <<: *type5
      descr: >
        Reverse the bits of the source operand.
      op: 124
      fn: 2

    ADDPCHI:
      <<: *type6
      descr: >
        Compute the sum of the current PC and and immediate operand that is
        shifted to the left 11 steps before the addition.
      note: >
        This instruction can be used in combination with several instructions
        that take an immediate operand in order to form a full 32-bit
        PC-relative offset. Examples of such instructions are ADD, LDW and JL.
      op: 61
      asmOperands: "{1}, #ext21hi(IM)"
